// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: data/v1/data.proto

package datav1

import (
	v1 "github.com/nanzhong/tstr/api/common/v1"
	_ "github.com/nanzhong/tstr/api/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTestRequest) Reset() {
	*x = GetTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestRequest) ProtoMessage() {}

func (x *GetTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestRequest.ProtoReflect.Descriptor instead.
func (*GetTestRequest) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{0}
}

func (x *GetTestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test         *v1.Test      `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	RunSummaries []*RunSummary `protobuf:"bytes,2,rep,name=run_summaries,json=runSummaries,proto3" json:"run_summaries,omitempty"`
}

func (x *GetTestResponse) Reset() {
	*x = GetTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestResponse) ProtoMessage() {}

func (x *GetTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestResponse.ProtoReflect.Descriptor instead.
func (*GetTestResponse) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{1}
}

func (x *GetTestResponse) GetTest() *v1.Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *GetTestResponse) GetRunSummaries() []*RunSummary {
	if x != nil {
		return x.RunSummaries
	}
	return nil
}

type QueryTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids          []string          `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	TestSuiteIds []string          `protobuf:"bytes,2,rep,name=test_suite_ids,json=testSuiteIds,proto3" json:"test_suite_ids,omitempty"`
	Labels       map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryTestsRequest) Reset() {
	*x = QueryTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestsRequest) ProtoMessage() {}

func (x *QueryTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestsRequest) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{2}
}

func (x *QueryTestsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryTestsRequest) GetTestSuiteIds() []string {
	if x != nil {
		return x.TestSuiteIds
	}
	return nil
}

func (x *QueryTestsRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type QueryTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*v1.Test `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *QueryTestsResponse) Reset() {
	*x = QueryTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestsResponse) ProtoMessage() {}

func (x *QueryTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestsResponse) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{3}
}

func (x *QueryTestsResponse) GetTests() []*v1.Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

type GetTestSuiteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTestSuiteRequest) Reset() {
	*x = GetTestSuiteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestSuiteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestSuiteRequest) ProtoMessage() {}

func (x *GetTestSuiteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestSuiteRequest.ProtoReflect.Descriptor instead.
func (*GetTestSuiteRequest) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{4}
}

func (x *GetTestSuiteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTestSuiteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSuite *v1.TestSuite `protobuf:"bytes,1,opt,name=test_suite,json=testSuite,proto3" json:"test_suite,omitempty"`
}

func (x *GetTestSuiteResponse) Reset() {
	*x = GetTestSuiteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestSuiteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestSuiteResponse) ProtoMessage() {}

func (x *GetTestSuiteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestSuiteResponse.ProtoReflect.Descriptor instead.
func (*GetTestSuiteResponse) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{5}
}

func (x *GetTestSuiteResponse) GetTestSuite() *v1.TestSuite {
	if x != nil {
		return x.TestSuite
	}
	return nil
}

type QueryTestSuitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids    []string          `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryTestSuitesRequest) Reset() {
	*x = QueryTestSuitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestSuitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestSuitesRequest) ProtoMessage() {}

func (x *QueryTestSuitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestSuitesRequest.ProtoReflect.Descriptor instead.
func (*QueryTestSuitesRequest) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{6}
}

func (x *QueryTestSuitesRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryTestSuitesRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type QueryTestSuitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestSuites []*v1.TestSuite `protobuf:"bytes,1,rep,name=test_suites,json=testSuites,proto3" json:"test_suites,omitempty"`
}

func (x *QueryTestSuitesResponse) Reset() {
	*x = QueryTestSuitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTestSuitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestSuitesResponse) ProtoMessage() {}

func (x *QueryTestSuitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestSuitesResponse.ProtoReflect.Descriptor instead.
func (*QueryTestSuitesResponse) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{7}
}

func (x *QueryTestSuitesResponse) GetTestSuites() []*v1.TestSuite {
	if x != nil {
		return x.TestSuites
	}
	return nil
}

type GetRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRunRequest) Reset() {
	*x = GetRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRequest) ProtoMessage() {}

func (x *GetRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRequest.ProtoReflect.Descriptor instead.
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{8}
}

func (x *GetRunRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Run *v1.Run `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
}

func (x *GetRunResponse) Reset() {
	*x = GetRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunResponse) ProtoMessage() {}

func (x *GetRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunResponse.ProtoReflect.Descriptor instead.
func (*GetRunResponse) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{9}
}

func (x *GetRunResponse) GetRun() *v1.Run {
	if x != nil {
		return x.Run
	}
	return nil
}

type QueryRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids             []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	TestIds         []string               `protobuf:"bytes,2,rep,name=test_ids,json=testIds,proto3" json:"test_ids,omitempty"`
	TestSuiteIds    []string               `protobuf:"bytes,3,rep,name=test_suite_ids,json=testSuiteIds,proto3" json:"test_suite_ids,omitempty"`
	RunnerIds       []string               `protobuf:"bytes,4,rep,name=runner_ids,json=runnerIds,proto3" json:"runner_ids,omitempty"`
	Results         []v1.Run_Result        `protobuf:"varint,5,rep,packed,name=results,proto3,enum=tstr.common.v1.Run_Result" json:"results,omitempty"`
	ScheduledBefore *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=scheduled_before,json=scheduledBefore,proto3" json:"scheduled_before,omitempty"`
	ScheduledAfter  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=scheduled_after,json=scheduledAfter,proto3" json:"scheduled_after,omitempty"`
	StartedBefore   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=started_before,json=startedBefore,proto3" json:"started_before,omitempty"`
	StartedAfter    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=started_after,json=startedAfter,proto3" json:"started_after,omitempty"`
	FinishedBefore  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=finished_before,json=finishedBefore,proto3" json:"finished_before,omitempty"`
	FinishedAfter   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=finished_after,json=finishedAfter,proto3" json:"finished_after,omitempty"`
}

func (x *QueryRunsRequest) Reset() {
	*x = QueryRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRunsRequest) ProtoMessage() {}

func (x *QueryRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRunsRequest.ProtoReflect.Descriptor instead.
func (*QueryRunsRequest) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{10}
}

func (x *QueryRunsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryRunsRequest) GetTestIds() []string {
	if x != nil {
		return x.TestIds
	}
	return nil
}

func (x *QueryRunsRequest) GetTestSuiteIds() []string {
	if x != nil {
		return x.TestSuiteIds
	}
	return nil
}

func (x *QueryRunsRequest) GetRunnerIds() []string {
	if x != nil {
		return x.RunnerIds
	}
	return nil
}

func (x *QueryRunsRequest) GetResults() []v1.Run_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QueryRunsRequest) GetScheduledBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledBefore
	}
	return nil
}

func (x *QueryRunsRequest) GetScheduledAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAfter
	}
	return nil
}

func (x *QueryRunsRequest) GetStartedBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedBefore
	}
	return nil
}

func (x *QueryRunsRequest) GetStartedAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAfter
	}
	return nil
}

func (x *QueryRunsRequest) GetFinishedBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedBefore
	}
	return nil
}

func (x *QueryRunsRequest) GetFinishedAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAfter
	}
	return nil
}

type QueryRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runs []*v1.Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *QueryRunsResponse) Reset() {
	*x = QueryRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRunsResponse) ProtoMessage() {}

func (x *QueryRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRunsResponse.ProtoReflect.Descriptor instead.
func (*QueryRunsResponse) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{11}
}

func (x *QueryRunsResponse) GetRuns() []*v1.Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

type GetRunnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRunnerRequest) Reset() {
	*x = GetRunnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerRequest) ProtoMessage() {}

func (x *GetRunnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerRequest.ProtoReflect.Descriptor instead.
func (*GetRunnerRequest) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{12}
}

func (x *GetRunnerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetRunnerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runner       *v1.Runner    `protobuf:"bytes,1,opt,name=runner,proto3" json:"runner,omitempty"`
	RunSummaries []*RunSummary `protobuf:"bytes,2,rep,name=run_summaries,json=runSummaries,proto3" json:"run_summaries,omitempty"`
}

func (x *GetRunnerResponse) Reset() {
	*x = GetRunnerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunnerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunnerResponse) ProtoMessage() {}

func (x *GetRunnerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunnerResponse.ProtoReflect.Descriptor instead.
func (*GetRunnerResponse) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{13}
}

func (x *GetRunnerResponse) GetRunner() *v1.Runner {
	if x != nil {
		return x.Runner
	}
	return nil
}

func (x *GetRunnerResponse) GetRunSummaries() []*RunSummary {
	if x != nil {
		return x.RunSummaries
	}
	return nil
}

type QueryRunnersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids                 []string             `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	LastHeartbeatWithin *durationpb.Duration `protobuf:"bytes,2,opt,name=last_heartbeat_within,json=lastHeartbeatWithin,proto3" json:"last_heartbeat_within,omitempty"`
}

func (x *QueryRunnersRequest) Reset() {
	*x = QueryRunnersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRunnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRunnersRequest) ProtoMessage() {}

func (x *QueryRunnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRunnersRequest.ProtoReflect.Descriptor instead.
func (*QueryRunnersRequest) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{14}
}

func (x *QueryRunnersRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryRunnersRequest) GetLastHeartbeatWithin() *durationpb.Duration {
	if x != nil {
		return x.LastHeartbeatWithin
	}
	return nil
}

type QueryRunnersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runners []*v1.Runner `protobuf:"bytes,1,rep,name=runners,proto3" json:"runners,omitempty"`
}

func (x *QueryRunnersResponse) Reset() {
	*x = QueryRunnersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRunnersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRunnersResponse) ProtoMessage() {}

func (x *QueryRunnersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRunnersResponse.ProtoReflect.Descriptor instead.
func (*QueryRunnersResponse) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{15}
}

func (x *QueryRunnersResponse) GetRunners() []*v1.Runner {
	if x != nil {
		return x.Runners
	}
	return nil
}

type RunSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestId        string                 `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	TestRunConfig *v1.Test_RunConfig     `protobuf:"bytes,3,opt,name=test_run_config,json=testRunConfig,proto3" json:"test_run_config,omitempty"`
	RunnerId      string                 `protobuf:"bytes,4,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	Result        v1.Run_Result          `protobuf:"varint,5,opt,name=result,proto3,enum=tstr.common.v1.Run_Result" json:"result,omitempty"`
	ResultData    map[string]string      `protobuf:"bytes,6,rep,name=result_data,json=resultData,proto3" json:"result_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ScheduledAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
}

func (x *RunSummary) Reset() {
	*x = RunSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_data_v1_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunSummary) ProtoMessage() {}

func (x *RunSummary) ProtoReflect() protoreflect.Message {
	mi := &file_data_v1_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunSummary.ProtoReflect.Descriptor instead.
func (*RunSummary) Descriptor() ([]byte, []int) {
	return file_data_v1_data_proto_rawDescGZIP(), []int{16}
}

func (x *RunSummary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RunSummary) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *RunSummary) GetTestRunConfig() *v1.Test_RunConfig {
	if x != nil {
		return x.TestRunConfig
	}
	return nil
}

func (x *RunSummary) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *RunSummary) GetResult() v1.Run_Result {
	if x != nil {
		return x.Result
	}
	return v1.Run_Result(0)
}

func (x *RunSummary) GetResultData() map[string]string {
	if x != nil {
		return x.ResultData
	}
	return nil
}

func (x *RunSummary) GetScheduledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledAt
	}
	return nil
}

func (x *RunSummary) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *RunSummary) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

var File_data_v1_data_proto protoreflect.FileDescriptor

var file_data_v1_data_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x7a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0d,
	0x72, 0x75, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x72,
	0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f,
	0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42,
	0x0c, 0x92, 0x01, 0x09, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x73,
	0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x12, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0x2f, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x73, 0x74,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65,
	0x22, 0xc0, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09,
	0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28, 0x01, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x48,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x0a,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x22, 0x96,
	0x05, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92, 0x01, 0x09,
	0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xfa, 0x42, 0x0c, 0x92,
	0x01, 0x09, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xfa,
	0x42, 0x0c, 0x92, 0x01, 0x09, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x73, 0x74,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x45, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x3f,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x73, 0x74,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x52,
	0x04, 0x72, 0x75, 0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x73, 0x74, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x75, 0x6e,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0xfa,
	0x42, 0x0c, 0x92, 0x01, 0x09, 0x22, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x69, 0x6e, 0x22, 0x48, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x73,
	0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xba, 0x04, 0x0a,
	0x0a, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x28, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x72, 0x06, 0xb0, 0x01, 0x01, 0xd0, 0x01, 0x01,
	0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x73, 0x74,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xf7, 0x06, 0x0a, 0x0b, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x67,
	0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x74,
	0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x73, 0x74,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x7c, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x73, 0x74,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x1b, 0x2e, 0x74, 0x73, 0x74, 0x72,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x63, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1e, 0x2e,
	0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x1e, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x73, 0x74, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x12, 0x10, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x73, 0x42, 0x9c, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x73, 0x74, 0x72,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x44, 0x61, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x61, 0x6e, 0x7a, 0x68, 0x6f, 0x6e, 0x67, 0x2f, 0x74, 0x73, 0x74, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x64, 0x61, 0x74, 0x61,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x54, 0x44, 0x58, 0xaa, 0x02, 0x0c, 0x54, 0x73, 0x74, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x54, 0x73, 0x74, 0x72, 0x5c, 0x44,
	0x61, 0x74, 0x61, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x54, 0x73, 0x74, 0x72, 0x5c, 0x44, 0x61,
	0x74, 0x61, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0e, 0x54, 0x73, 0x74, 0x72, 0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_data_v1_data_proto_rawDescOnce sync.Once
	file_data_v1_data_proto_rawDescData = file_data_v1_data_proto_rawDesc
)

func file_data_v1_data_proto_rawDescGZIP() []byte {
	file_data_v1_data_proto_rawDescOnce.Do(func() {
		file_data_v1_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_data_v1_data_proto_rawDescData)
	})
	return file_data_v1_data_proto_rawDescData
}

var file_data_v1_data_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_data_v1_data_proto_goTypes = []interface{}{
	(*GetTestRequest)(nil),          // 0: tstr.data.v1.GetTestRequest
	(*GetTestResponse)(nil),         // 1: tstr.data.v1.GetTestResponse
	(*QueryTestsRequest)(nil),       // 2: tstr.data.v1.QueryTestsRequest
	(*QueryTestsResponse)(nil),      // 3: tstr.data.v1.QueryTestsResponse
	(*GetTestSuiteRequest)(nil),     // 4: tstr.data.v1.GetTestSuiteRequest
	(*GetTestSuiteResponse)(nil),    // 5: tstr.data.v1.GetTestSuiteResponse
	(*QueryTestSuitesRequest)(nil),  // 6: tstr.data.v1.QueryTestSuitesRequest
	(*QueryTestSuitesResponse)(nil), // 7: tstr.data.v1.QueryTestSuitesResponse
	(*GetRunRequest)(nil),           // 8: tstr.data.v1.GetRunRequest
	(*GetRunResponse)(nil),          // 9: tstr.data.v1.GetRunResponse
	(*QueryRunsRequest)(nil),        // 10: tstr.data.v1.QueryRunsRequest
	(*QueryRunsResponse)(nil),       // 11: tstr.data.v1.QueryRunsResponse
	(*GetRunnerRequest)(nil),        // 12: tstr.data.v1.GetRunnerRequest
	(*GetRunnerResponse)(nil),       // 13: tstr.data.v1.GetRunnerResponse
	(*QueryRunnersRequest)(nil),     // 14: tstr.data.v1.QueryRunnersRequest
	(*QueryRunnersResponse)(nil),    // 15: tstr.data.v1.QueryRunnersResponse
	(*RunSummary)(nil),              // 16: tstr.data.v1.RunSummary
	nil,                             // 17: tstr.data.v1.QueryTestsRequest.LabelsEntry
	nil,                             // 18: tstr.data.v1.QueryTestSuitesRequest.LabelsEntry
	nil,                             // 19: tstr.data.v1.RunSummary.ResultDataEntry
	(*v1.Test)(nil),                 // 20: tstr.common.v1.Test
	(*v1.TestSuite)(nil),            // 21: tstr.common.v1.TestSuite
	(*v1.Run)(nil),                  // 22: tstr.common.v1.Run
	(v1.Run_Result)(0),              // 23: tstr.common.v1.Run.Result
	(*timestamppb.Timestamp)(nil),   // 24: google.protobuf.Timestamp
	(*v1.Runner)(nil),               // 25: tstr.common.v1.Runner
	(*durationpb.Duration)(nil),     // 26: google.protobuf.Duration
	(*v1.Test_RunConfig)(nil),       // 27: tstr.common.v1.Test.RunConfig
}
var file_data_v1_data_proto_depIdxs = []int32{
	20, // 0: tstr.data.v1.GetTestResponse.test:type_name -> tstr.common.v1.Test
	16, // 1: tstr.data.v1.GetTestResponse.run_summaries:type_name -> tstr.data.v1.RunSummary
	17, // 2: tstr.data.v1.QueryTestsRequest.labels:type_name -> tstr.data.v1.QueryTestsRequest.LabelsEntry
	20, // 3: tstr.data.v1.QueryTestsResponse.tests:type_name -> tstr.common.v1.Test
	21, // 4: tstr.data.v1.GetTestSuiteResponse.test_suite:type_name -> tstr.common.v1.TestSuite
	18, // 5: tstr.data.v1.QueryTestSuitesRequest.labels:type_name -> tstr.data.v1.QueryTestSuitesRequest.LabelsEntry
	21, // 6: tstr.data.v1.QueryTestSuitesResponse.test_suites:type_name -> tstr.common.v1.TestSuite
	22, // 7: tstr.data.v1.GetRunResponse.run:type_name -> tstr.common.v1.Run
	23, // 8: tstr.data.v1.QueryRunsRequest.results:type_name -> tstr.common.v1.Run.Result
	24, // 9: tstr.data.v1.QueryRunsRequest.scheduled_before:type_name -> google.protobuf.Timestamp
	24, // 10: tstr.data.v1.QueryRunsRequest.scheduled_after:type_name -> google.protobuf.Timestamp
	24, // 11: tstr.data.v1.QueryRunsRequest.started_before:type_name -> google.protobuf.Timestamp
	24, // 12: tstr.data.v1.QueryRunsRequest.started_after:type_name -> google.protobuf.Timestamp
	24, // 13: tstr.data.v1.QueryRunsRequest.finished_before:type_name -> google.protobuf.Timestamp
	24, // 14: tstr.data.v1.QueryRunsRequest.finished_after:type_name -> google.protobuf.Timestamp
	22, // 15: tstr.data.v1.QueryRunsResponse.runs:type_name -> tstr.common.v1.Run
	25, // 16: tstr.data.v1.GetRunnerResponse.runner:type_name -> tstr.common.v1.Runner
	16, // 17: tstr.data.v1.GetRunnerResponse.run_summaries:type_name -> tstr.data.v1.RunSummary
	26, // 18: tstr.data.v1.QueryRunnersRequest.last_heartbeat_within:type_name -> google.protobuf.Duration
	25, // 19: tstr.data.v1.QueryRunnersResponse.runners:type_name -> tstr.common.v1.Runner
	27, // 20: tstr.data.v1.RunSummary.test_run_config:type_name -> tstr.common.v1.Test.RunConfig
	23, // 21: tstr.data.v1.RunSummary.result:type_name -> tstr.common.v1.Run.Result
	19, // 22: tstr.data.v1.RunSummary.result_data:type_name -> tstr.data.v1.RunSummary.ResultDataEntry
	24, // 23: tstr.data.v1.RunSummary.scheduled_at:type_name -> google.protobuf.Timestamp
	24, // 24: tstr.data.v1.RunSummary.started_at:type_name -> google.protobuf.Timestamp
	24, // 25: tstr.data.v1.RunSummary.finished_at:type_name -> google.protobuf.Timestamp
	0,  // 26: tstr.data.v1.DataService.GetTest:input_type -> tstr.data.v1.GetTestRequest
	2,  // 27: tstr.data.v1.DataService.QueryTests:input_type -> tstr.data.v1.QueryTestsRequest
	4,  // 28: tstr.data.v1.DataService.GetTestSuite:input_type -> tstr.data.v1.GetTestSuiteRequest
	6,  // 29: tstr.data.v1.DataService.QueryTestSuites:input_type -> tstr.data.v1.QueryTestSuitesRequest
	8,  // 30: tstr.data.v1.DataService.GetRun:input_type -> tstr.data.v1.GetRunRequest
	10, // 31: tstr.data.v1.DataService.QueryRuns:input_type -> tstr.data.v1.QueryRunsRequest
	12, // 32: tstr.data.v1.DataService.GetRunner:input_type -> tstr.data.v1.GetRunnerRequest
	14, // 33: tstr.data.v1.DataService.QueryRunners:input_type -> tstr.data.v1.QueryRunnersRequest
	1,  // 34: tstr.data.v1.DataService.GetTest:output_type -> tstr.data.v1.GetTestResponse
	3,  // 35: tstr.data.v1.DataService.QueryTests:output_type -> tstr.data.v1.QueryTestsResponse
	5,  // 36: tstr.data.v1.DataService.GetTestSuite:output_type -> tstr.data.v1.GetTestSuiteResponse
	7,  // 37: tstr.data.v1.DataService.QueryTestSuites:output_type -> tstr.data.v1.QueryTestSuitesResponse
	9,  // 38: tstr.data.v1.DataService.GetRun:output_type -> tstr.data.v1.GetRunResponse
	11, // 39: tstr.data.v1.DataService.QueryRuns:output_type -> tstr.data.v1.QueryRunsResponse
	13, // 40: tstr.data.v1.DataService.GetRunner:output_type -> tstr.data.v1.GetRunnerResponse
	15, // 41: tstr.data.v1.DataService.QueryRunners:output_type -> tstr.data.v1.QueryRunnersResponse
	34, // [34:42] is the sub-list for method output_type
	26, // [26:34] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_data_v1_data_proto_init() }
func file_data_v1_data_proto_init() {
	if File_data_v1_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_data_v1_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestSuiteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestSuiteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestSuitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTestSuitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunnerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRunnersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRunnersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_data_v1_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_data_v1_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_data_v1_data_proto_goTypes,
		DependencyIndexes: file_data_v1_data_proto_depIdxs,
		MessageInfos:      file_data_v1_data_proto_msgTypes,
	}.Build()
	File_data_v1_data_proto = out.File
	file_data_v1_data_proto_rawDesc = nil
	file_data_v1_data_proto_goTypes = nil
	file_data_v1_data_proto_depIdxs = nil
}
