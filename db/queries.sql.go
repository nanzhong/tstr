// Code generated by pggen. DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
)

// Querier is a typesafe Go interface backed by SQL queries.
//
// Methods ending with Batch enqueue a query to run later in a pgx.Batch. After
// calling SendBatch on pgx.Conn, pgxpool.Pool, or pgx.Tx, use the Scan methods
// to parse the results.
type Querier interface {
	IssueAccessToken(ctx context.Context, params IssueAccessTokenParams) (IssueAccessTokenRow, error)
	// IssueAccessTokenBatch enqueues a IssueAccessToken query into batch to be executed
	// later by the batch.
	IssueAccessTokenBatch(batch genericBatch, params IssueAccessTokenParams)
	// IssueAccessTokenScan scans the result of an executed IssueAccessTokenBatch query.
	IssueAccessTokenScan(results pgx.BatchResults) (IssueAccessTokenRow, error)

	ValidateAccessToken(ctx context.Context, tokenHash string) (bool, error)
	// ValidateAccessTokenBatch enqueues a ValidateAccessToken query into batch to be executed
	// later by the batch.
	ValidateAccessTokenBatch(batch genericBatch, tokenHash string)
	// ValidateAccessTokenScan scans the result of an executed ValidateAccessTokenBatch query.
	ValidateAccessTokenScan(results pgx.BatchResults) (bool, error)

	GetAccessToken(ctx context.Context, id string) (GetAccessTokenRow, error)
	// GetAccessTokenBatch enqueues a GetAccessToken query into batch to be executed
	// later by the batch.
	GetAccessTokenBatch(batch genericBatch, id string)
	// GetAccessTokenScan scans the result of an executed GetAccessTokenBatch query.
	GetAccessTokenScan(results pgx.BatchResults) (GetAccessTokenRow, error)

	ListAccessTokens(ctx context.Context, includeExpired bool, includeRevoked bool) ([]ListAccessTokensRow, error)
	// ListAccessTokensBatch enqueues a ListAccessTokens query into batch to be executed
	// later by the batch.
	ListAccessTokensBatch(batch genericBatch, includeExpired bool, includeRevoked bool)
	// ListAccessTokensScan scans the result of an executed ListAccessTokensBatch query.
	ListAccessTokensScan(results pgx.BatchResults) ([]ListAccessTokensRow, error)

	RevokeAccessToken(ctx context.Context, id string) (pgconn.CommandTag, error)
	// RevokeAccessTokenBatch enqueues a RevokeAccessToken query into batch to be executed
	// later by the batch.
	RevokeAccessTokenBatch(batch genericBatch, id string)
	// RevokeAccessTokenScan scans the result of an executed RevokeAccessTokenBatch query.
	RevokeAccessTokenScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	RegisterRunner(ctx context.Context, params RegisterRunnerParams) (RegisterRunnerRow, error)
	// RegisterRunnerBatch enqueues a RegisterRunner query into batch to be executed
	// later by the batch.
	RegisterRunnerBatch(batch genericBatch, params RegisterRunnerParams)
	// RegisterRunnerScan scans the result of an executed RegisterRunnerBatch query.
	RegisterRunnerScan(results pgx.BatchResults) (RegisterRunnerRow, error)

	GetRunner(ctx context.Context, id string) (GetRunnerRow, error)
	// GetRunnerBatch enqueues a GetRunner query into batch to be executed
	// later by the batch.
	GetRunnerBatch(batch genericBatch, id string)
	// GetRunnerScan scans the result of an executed GetRunnerBatch query.
	GetRunnerScan(results pgx.BatchResults) (GetRunnerRow, error)

	ListRunners(ctx context.Context, filterRevoked bool) ([]ListRunnersRow, error)
	// ListRunnersBatch enqueues a ListRunners query into batch to be executed
	// later by the batch.
	ListRunnersBatch(batch genericBatch, filterRevoked bool)
	// ListRunnersScan scans the result of an executed ListRunnersBatch query.
	ListRunnersScan(results pgx.BatchResults) ([]ListRunnersRow, error)

	ApproveRunner(ctx context.Context, id string) (pgconn.CommandTag, error)
	// ApproveRunnerBatch enqueues a ApproveRunner query into batch to be executed
	// later by the batch.
	ApproveRunnerBatch(batch genericBatch, id string)
	// ApproveRunnerScan scans the result of an executed ApproveRunnerBatch query.
	ApproveRunnerScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	RevokeRunner(ctx context.Context, id string) (pgconn.CommandTag, error)
	// RevokeRunnerBatch enqueues a RevokeRunner query into batch to be executed
	// later by the batch.
	RevokeRunnerBatch(batch genericBatch, id string)
	// RevokeRunnerScan scans the result of an executed RevokeRunnerBatch query.
	RevokeRunnerScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	GetRun(ctx context.Context, id string) (GetRunRow, error)
	// GetRunBatch enqueues a GetRun query into batch to be executed
	// later by the batch.
	GetRunBatch(batch genericBatch, id string)
	// GetRunScan scans the result of an executed GetRunBatch query.
	GetRunScan(results pgx.BatchResults) (GetRunRow, error)

	ListRuns(ctx context.Context, params ListRunsParams) ([]ListRunsRow, error)
	// ListRunsBatch enqueues a ListRuns query into batch to be executed
	// later by the batch.
	ListRunsBatch(batch genericBatch, params ListRunsParams)
	// ListRunsScan scans the result of an executed ListRunsBatch query.
	ListRunsScan(results pgx.BatchResults) ([]ListRunsRow, error)

	ScheduleRun(ctx context.Context, testID string, testRunConfigID string) (ScheduleRunRow, error)
	// ScheduleRunBatch enqueues a ScheduleRun query into batch to be executed
	// later by the batch.
	ScheduleRunBatch(batch genericBatch, testID string, testRunConfigID string)
	// ScheduleRunScan scans the result of an executed ScheduleRunBatch query.
	ScheduleRunScan(results pgx.BatchResults) (ScheduleRunRow, error)

	NextRun(ctx context.Context, runnerID string, labels pgtype.JSONB) (NextRunRow, error)
	// NextRunBatch enqueues a NextRun query into batch to be executed
	// later by the batch.
	NextRunBatch(batch genericBatch, runnerID string, labels pgtype.JSONB)
	// NextRunScan scans the result of an executed NextRunBatch query.
	NextRunScan(results pgx.BatchResults) (NextRunRow, error)

	UpdateRun(ctx context.Context, params UpdateRunParams) (pgconn.CommandTag, error)
	// UpdateRunBatch enqueues a UpdateRun query into batch to be executed
	// later by the batch.
	UpdateRunBatch(batch genericBatch, params UpdateRunParams)
	// UpdateRunScan scans the result of an executed UpdateRunBatch query.
	UpdateRunScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	DefineTestSuite(ctx context.Context, name string, labels pgtype.JSONB) (DefineTestSuiteRow, error)
	// DefineTestSuiteBatch enqueues a DefineTestSuite query into batch to be executed
	// later by the batch.
	DefineTestSuiteBatch(batch genericBatch, name string, labels pgtype.JSONB)
	// DefineTestSuiteScan scans the result of an executed DefineTestSuiteBatch query.
	DefineTestSuiteScan(results pgx.BatchResults) (DefineTestSuiteRow, error)

	UpdateTestSuite(ctx context.Context, params UpdateTestSuiteParams) (pgconn.CommandTag, error)
	// UpdateTestSuiteBatch enqueues a UpdateTestSuite query into batch to be executed
	// later by the batch.
	UpdateTestSuiteBatch(batch genericBatch, params UpdateTestSuiteParams)
	// UpdateTestSuiteScan scans the result of an executed UpdateTestSuiteBatch query.
	UpdateTestSuiteScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	GetTestSuite(ctx context.Context, id string) (GetTestSuiteRow, error)
	// GetTestSuiteBatch enqueues a GetTestSuite query into batch to be executed
	// later by the batch.
	GetTestSuiteBatch(batch genericBatch, id string)
	// GetTestSuiteScan scans the result of an executed GetTestSuiteBatch query.
	GetTestSuiteScan(results pgx.BatchResults) (GetTestSuiteRow, error)

	ListTestSuites(ctx context.Context, labels pgtype.JSONB) ([]ListTestSuitesRow, error)
	// ListTestSuitesBatch enqueues a ListTestSuites query into batch to be executed
	// later by the batch.
	ListTestSuitesBatch(batch genericBatch, labels pgtype.JSONB)
	// ListTestSuitesScan scans the result of an executed ListTestSuitesBatch query.
	ListTestSuitesScan(results pgx.BatchResults) ([]ListTestSuitesRow, error)

	ArchiveTestSuite(ctx context.Context, id string) (pgconn.CommandTag, error)
	// ArchiveTestSuiteBatch enqueues a ArchiveTestSuite query into batch to be executed
	// later by the batch.
	ArchiveTestSuiteBatch(batch genericBatch, id string)
	// ArchiveTestSuiteScan scans the result of an executed ArchiveTestSuiteBatch query.
	ArchiveTestSuiteScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	RegisterTest(ctx context.Context, params RegisterTestParams) (RegisterTestRow, error)
	// RegisterTestBatch enqueues a RegisterTest query into batch to be executed
	// later by the batch.
	RegisterTestBatch(batch genericBatch, params RegisterTestParams)
	// RegisterTestScan scans the result of an executed RegisterTestBatch query.
	RegisterTestScan(results pgx.BatchResults) (RegisterTestRow, error)

	GetTest(ctx context.Context, id string) (GetTestRow, error)
	// GetTestBatch enqueues a GetTest query into batch to be executed
	// later by the batch.
	GetTestBatch(batch genericBatch, id string)
	// GetTestScan scans the result of an executed GetTestBatch query.
	GetTestScan(results pgx.BatchResults) (GetTestRow, error)

	ListTests(ctx context.Context, labels pgtype.JSONB) ([]ListTestsRow, error)
	// ListTestsBatch enqueues a ListTests query into batch to be executed
	// later by the batch.
	ListTestsBatch(batch genericBatch, labels pgtype.JSONB)
	// ListTestsScan scans the result of an executed ListTestsBatch query.
	ListTestsScan(results pgx.BatchResults) ([]ListTestsRow, error)

	UpdateTest(ctx context.Context, params UpdateTestParams) (pgconn.CommandTag, error)
	// UpdateTestBatch enqueues a UpdateTest query into batch to be executed
	// later by the batch.
	UpdateTestBatch(batch genericBatch, params UpdateTestParams)
	// UpdateTestScan scans the result of an executed UpdateTestBatch query.
	UpdateTestScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	CreateTestRunConfig(ctx context.Context, params CreateTestRunConfigParams) (CreateTestRunConfigRow, error)
	// CreateTestRunConfigBatch enqueues a CreateTestRunConfig query into batch to be executed
	// later by the batch.
	CreateTestRunConfigBatch(batch genericBatch, params CreateTestRunConfigParams)
	// CreateTestRunConfigScan scans the result of an executed CreateTestRunConfigBatch query.
	CreateTestRunConfigScan(results pgx.BatchResults) (CreateTestRunConfigRow, error)

	ArchiveTest(ctx context.Context, id string) (pgconn.CommandTag, error)
	// ArchiveTestBatch enqueues a ArchiveTest query into batch to be executed
	// later by the batch.
	ArchiveTestBatch(batch genericBatch, id string)
	// ArchiveTestScan scans the result of an executed ArchiveTestBatch query.
	ArchiveTestScan(results pgx.BatchResults) (pgconn.CommandTag, error)

	UIListRecentRuns(ctx context.Context, limit int) ([]UIListRecentRunsRow, error)
	// UIListRecentRunsBatch enqueues a UIListRecentRuns query into batch to be executed
	// later by the batch.
	UIListRecentRunsBatch(batch genericBatch, limit int)
	// UIListRecentRunsScan scans the result of an executed UIListRecentRunsBatch query.
	UIListRecentRunsScan(results pgx.BatchResults) ([]UIListRecentRunsRow, error)

	UITestsByLabels(ctx context.Context) ([]UITestsByLabelsRow, error)
	// UITestsByLabelsBatch enqueues a UITestsByLabels query into batch to be executed
	// later by the batch.
	UITestsByLabelsBatch(batch genericBatch)
	// UITestsByLabelsScan scans the result of an executed UITestsByLabelsBatch query.
	UITestsByLabelsScan(results pgx.BatchResults) ([]UITestsByLabelsRow, error)

	UITestResults(ctx context.Context) ([]UITestResultsRow, error)
	// UITestResultsBatch enqueues a UITestResults query into batch to be executed
	// later by the batch.
	UITestResultsBatch(batch genericBatch)
	// UITestResultsScan scans the result of an executed UITestResultsBatch query.
	UITestResultsScan(results pgx.BatchResults) ([]UITestResultsRow, error)
}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

var _ Querier = &DBQuerier{}

// genericConn is a connection to a Postgres database. This is usually backed by
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	// Query executes sql with args. If there is an error the returned Rows will
	// be returned in an error state. So it is allowed to ignore the error
	// returned from Query and handle it in Rows.
	Query(ctx context.Context, sql string, args ...interface{}) (pgx.Rows, error)

	// QueryRow is a convenience wrapper over Query. Any error that occurs while
	// querying is deferred until calling Scan on the returned Row. That Row will
	// error with pgx.ErrNoRows if no rows are returned.
	QueryRow(ctx context.Context, sql string, args ...interface{}) pgx.Row

	// Exec executes sql. sql can be either a prepared statement name or an SQL
	// string. arguments should be referenced positionally from the sql string
	// as $1, $2, etc.
	Exec(ctx context.Context, sql string, arguments ...interface{}) (pgconn.CommandTag, error)
}

// genericBatch batches queries to send in a single network request to a
// Postgres server. This is usually backed by *pgx.Batch.
type genericBatch interface {
	// Queue queues a query to batch b. query can be an SQL query or the name of a
	// prepared statement. See Queue on *pgx.Batch.
	Queue(query string, arguments ...interface{})
}

// NewQuerier creates a DBQuerier that implements Querier. conn is typically
// *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerier(conn genericConn) *DBQuerier {
	return NewQuerierConfig(conn, QuerierConfig{})
}

type QuerierConfig struct {
	// DataTypes contains pgtype.Value to use for encoding and decoding instead
	// of pggen-generated pgtype.ValueTranscoder.
	//
	// If OIDs are available for an input parameter type and all of its
	// transitive dependencies, pggen will use the binary encoding format for
	// the input parameter.
	DataTypes []pgtype.DataType
}

// NewQuerierConfig creates a DBQuerier that implements Querier with the given
// config. conn is typically *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
func NewQuerierConfig(conn genericConn, cfg QuerierConfig) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver(cfg.DataTypes)}
}

// WithTx creates a new DBQuerier that uses the transaction to run all queries.
func (q *DBQuerier) WithTx(tx pgx.Tx) (*DBQuerier, error) {
	return &DBQuerier{conn: tx}, nil
}

// preparer is any Postgres connection transport that provides a way to prepare
// a statement, most commonly *pgx.Conn.
type preparer interface {
	Prepare(ctx context.Context, name, sql string) (sd *pgconn.StatementDescription, err error)
}

// PrepareAllQueries executes a PREPARE statement for all pggen generated SQL
// queries in querier files. Typical usage is as the AfterConnect callback
// for pgxpool.Config
//
// pgx will use the prepared statement if available. Calling PrepareAllQueries
// is an optional optimization to avoid a network round-trip the first time pgx
// runs a query if pgx statement caching is enabled.
func PrepareAllQueries(ctx context.Context, p preparer) error {
	if _, err := p.Prepare(ctx, issueAccessTokenSQL, issueAccessTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'IssueAccessToken': %w", err)
	}
	if _, err := p.Prepare(ctx, validateAccessTokenSQL, validateAccessTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'ValidateAccessToken': %w", err)
	}
	if _, err := p.Prepare(ctx, getAccessTokenSQL, getAccessTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'GetAccessToken': %w", err)
	}
	if _, err := p.Prepare(ctx, listAccessTokensSQL, listAccessTokensSQL); err != nil {
		return fmt.Errorf("prepare query 'ListAccessTokens': %w", err)
	}
	if _, err := p.Prepare(ctx, revokeAccessTokenSQL, revokeAccessTokenSQL); err != nil {
		return fmt.Errorf("prepare query 'RevokeAccessToken': %w", err)
	}
	if _, err := p.Prepare(ctx, registerRunnerSQL, registerRunnerSQL); err != nil {
		return fmt.Errorf("prepare query 'RegisterRunner': %w", err)
	}
	if _, err := p.Prepare(ctx, getRunnerSQL, getRunnerSQL); err != nil {
		return fmt.Errorf("prepare query 'GetRunner': %w", err)
	}
	if _, err := p.Prepare(ctx, listRunnersSQL, listRunnersSQL); err != nil {
		return fmt.Errorf("prepare query 'ListRunners': %w", err)
	}
	if _, err := p.Prepare(ctx, approveRunnerSQL, approveRunnerSQL); err != nil {
		return fmt.Errorf("prepare query 'ApproveRunner': %w", err)
	}
	if _, err := p.Prepare(ctx, revokeRunnerSQL, revokeRunnerSQL); err != nil {
		return fmt.Errorf("prepare query 'RevokeRunner': %w", err)
	}
	if _, err := p.Prepare(ctx, getRunSQL, getRunSQL); err != nil {
		return fmt.Errorf("prepare query 'GetRun': %w", err)
	}
	if _, err := p.Prepare(ctx, listRunsSQL, listRunsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListRuns': %w", err)
	}
	if _, err := p.Prepare(ctx, scheduleRunSQL, scheduleRunSQL); err != nil {
		return fmt.Errorf("prepare query 'ScheduleRun': %w", err)
	}
	if _, err := p.Prepare(ctx, nextRunSQL, nextRunSQL); err != nil {
		return fmt.Errorf("prepare query 'NextRun': %w", err)
	}
	if _, err := p.Prepare(ctx, updateRunSQL, updateRunSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateRun': %w", err)
	}
	if _, err := p.Prepare(ctx, defineTestSuiteSQL, defineTestSuiteSQL); err != nil {
		return fmt.Errorf("prepare query 'DefineTestSuite': %w", err)
	}
	if _, err := p.Prepare(ctx, updateTestSuiteSQL, updateTestSuiteSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateTestSuite': %w", err)
	}
	if _, err := p.Prepare(ctx, getTestSuiteSQL, getTestSuiteSQL); err != nil {
		return fmt.Errorf("prepare query 'GetTestSuite': %w", err)
	}
	if _, err := p.Prepare(ctx, listTestSuitesSQL, listTestSuitesSQL); err != nil {
		return fmt.Errorf("prepare query 'ListTestSuites': %w", err)
	}
	if _, err := p.Prepare(ctx, archiveTestSuiteSQL, archiveTestSuiteSQL); err != nil {
		return fmt.Errorf("prepare query 'ArchiveTestSuite': %w", err)
	}
	if _, err := p.Prepare(ctx, registerTestSQL, registerTestSQL); err != nil {
		return fmt.Errorf("prepare query 'RegisterTest': %w", err)
	}
	if _, err := p.Prepare(ctx, getTestSQL, getTestSQL); err != nil {
		return fmt.Errorf("prepare query 'GetTest': %w", err)
	}
	if _, err := p.Prepare(ctx, listTestsSQL, listTestsSQL); err != nil {
		return fmt.Errorf("prepare query 'ListTests': %w", err)
	}
	if _, err := p.Prepare(ctx, updateTestSQL, updateTestSQL); err != nil {
		return fmt.Errorf("prepare query 'UpdateTest': %w", err)
	}
	if _, err := p.Prepare(ctx, createTestRunConfigSQL, createTestRunConfigSQL); err != nil {
		return fmt.Errorf("prepare query 'CreateTestRunConfig': %w", err)
	}
	if _, err := p.Prepare(ctx, archiveTestSQL, archiveTestSQL); err != nil {
		return fmt.Errorf("prepare query 'ArchiveTest': %w", err)
	}
	if _, err := p.Prepare(ctx, uilistRecentRunsSQL, uilistRecentRunsSQL); err != nil {
		return fmt.Errorf("prepare query 'UIListRecentRuns': %w", err)
	}
	if _, err := p.Prepare(ctx, uitestsByLabelsSQL, uitestsByLabelsSQL); err != nil {
		return fmt.Errorf("prepare query 'UITestsByLabels': %w", err)
	}
	if _, err := p.Prepare(ctx, uitestResultsSQL, uitestResultsSQL); err != nil {
		return fmt.Errorf("prepare query 'UITestResults': %w", err)
	}
	return nil
}

// Tests represents the Postgres composite type "tests".
type Tests struct {
	ID           string             `json:"id"`
	Name         string             `json:"name"`
	Labels       pgtype.JSONB       `json:"labels"`
	CronSchedule string             `json:"cron_schedule"`
	RegisteredAt pgtype.Timestamptz `json:"registered_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	ArchivedAt   pgtype.Timestamptz `json:"archived_at"`
}

// AccessTokenScope represents the Postgres enum "access_token_scope".
type AccessTokenScope string

const (
	AccessTokenScopeAdmin     AccessTokenScope = "admin"
	AccessTokenScopeControlR  AccessTokenScope = "control_r"
	AccessTokenScopeControlRW AccessTokenScope = "control_rw"
)

func (a AccessTokenScope) String() string { return string(a) }

// RunResult represents the Postgres enum "run_result".
type RunResult string

const (
	RunResultUnknown RunResult = "unknown"
	RunResultPass    RunResult = "pass"
	RunResultFail    RunResult = "fail"
	RunResultError   RunResult = "error"
)

func (r RunResult) String() string { return string(r) }

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver(types []pgtype.DataType) *typeResolver {
	ci := pgtype.NewConnInfo()
	for _, typ := range types {
		if txt, ok := typ.Value.(textPreferrer); ok && typ.OID != unknownOID {
			typ.Value = txt.ValueTranscoder
		}
		ci.RegisterDataType(typ)
	}
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultVal pgtype.ValueTranscoder // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	fs := make([]pgtype.CompositeTypeField, len(fields))
	vals := make([]pgtype.ValueTranscoder, len(fields))
	isBinaryOk := true
	for i, field := range fields {
		oid, val, ok := tr.findValue(field.typeName)
		if !ok {
			oid = unknownOID
			val = field.defaultVal
		}
		isBinaryOk = isBinaryOk && oid != unknownOID
		fs[i] = pgtype.CompositeTypeField{Name: field.name, OID: oid}
		vals[i] = val
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	typ, _ := pgtype.NewCompositeTypeValues(name, fs, vals)
	if !isBinaryOk {
		return textPreferrer{typ, name}
	}
	return typ
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	elemOID, elemVal, ok := tr.findValue(elemName)
	elemValFunc := func() pgtype.ValueTranscoder {
		return pgtype.NewValue(elemVal).(pgtype.ValueTranscoder)
	}
	if !ok {
		elemOID = unknownOID
		elemValFunc = defaultVal
	}
	typ := pgtype.NewArrayType(name, elemOID, elemValFunc)
	if elemOID == unknownOID {
		return textPreferrer{typ, name}
	}
	return typ
}

// newTests creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'tests'.
func (tr *typeResolver) newTests() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"tests",
		compositeField{"id", "uuid", &pgtype.UUID{}},
		compositeField{"name", "varchar", &pgtype.Varchar{}},
		compositeField{"labels", "jsonb", &pgtype.JSONB{}},
		compositeField{"cron_schedule", "varchar", &pgtype.Varchar{}},
		compositeField{"registered_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"updated_at", "timestamptz", &pgtype.Timestamptz{}},
		compositeField{"archived_at", "timestamptz", &pgtype.Timestamptz{}},
	)
}

// newAccessTokenScopeArray creates a new pgtype.ValueTranscoder for the Postgres
// '_access_token_scope' array type.
func (tr *typeResolver) newAccessTokenScopeArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_access_token_scope", "access_token_scope", newAccessTokenScopeEnum)
}

// newAccessTokenScopeArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_access_token_scope' to encode query parameters.
func (tr *typeResolver) newAccessTokenScopeArrayInit(ps []AccessTokenScope) pgtype.ValueTranscoder {
	dec := tr.newAccessTokenScopeArray()
	if err := dec.Set(tr.newAccessTokenScopeArrayRaw(ps)); err != nil {
		panic("encode []AccessTokenScope: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_access_token_scope"}
}

// newAccessTokenScopeArrayRaw returns all elements for the Postgres array type '_access_token_scope'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newAccessTokenScopeArrayRaw(vs []AccessTokenScope) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = v
	}
	return elems
}

// newRunResultArray creates a new pgtype.ValueTranscoder for the Postgres
// '_run_result' array type.
func (tr *typeResolver) newRunResultArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_run_result", "run_result", newRunResultEnum)
}

// newRunResultArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_run_result' to encode query parameters.
func (tr *typeResolver) newRunResultArrayInit(ps []RunResult) pgtype.ValueTranscoder {
	dec := tr.newRunResultArray()
	if err := dec.Set(tr.newRunResultArrayRaw(ps)); err != nil {
		panic("encode []RunResult: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_run_result"}
}

// newRunResultArrayRaw returns all elements for the Postgres array type '_run_result'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newRunResultArrayRaw(vs []RunResult) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = v
	}
	return elems
}

// newTestsArray creates a new pgtype.ValueTranscoder for the Postgres
// '_tests' array type.
func (tr *typeResolver) newTestsArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_tests", "tests", tr.newTests)
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs if the results from QueryAllDataTypes aren't passed to
// NewQuerierConfig.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
