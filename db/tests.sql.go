// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: tests.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const getTest = `-- name: GetTest :one
SELECT id, name, run_config, labels, matrix, cron_schedule, next_run_at, registered_at, updated_at
FROM tests
WHERE tests.id = $1
`

func (q *Queries) GetTest(ctx context.Context, db DBTX, id uuid.UUID) (Test, error) {
	row := db.QueryRow(ctx, getTest, id)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RunConfig,
		&i.Labels,
		&i.Matrix,
		&i.CronSchedule,
		&i.NextRunAt,
		&i.RegisteredAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTests = `-- name: ListTests :many
SELECT id, name, run_config, labels, matrix, cron_schedule, next_run_at, registered_at, updated_at
FROM tests
ORDER BY tests.name ASC
`

func (q *Queries) ListTests(ctx context.Context, db DBTX) ([]Test, error) {
	rows, err := db.Query(ctx, listTests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RunConfig,
			&i.Labels,
			&i.Matrix,
			&i.CronSchedule,
			&i.NextRunAt,
			&i.RegisteredAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTestsIDsMatchingLabelKeys = `-- name: ListTestsIDsMatchingLabelKeys :many
SELECT tests.id, tests.labels
FROM tests
WHERE
  tests.labels ?& COALESCE($1::varchar[], '{}') AND
  NOT tests.labels ?| COALESCE($2::varchar[], '{}')::varchar[]
`

type ListTestsIDsMatchingLabelKeysParams struct {
	IncludeLabelKeys []string
	FilterLabelKeys  []string
}

type ListTestsIDsMatchingLabelKeysRow struct {
	ID     uuid.UUID
	Labels pgtype.JSONB
}

func (q *Queries) ListTestsIDsMatchingLabelKeys(ctx context.Context, db DBTX, arg ListTestsIDsMatchingLabelKeysParams) ([]ListTestsIDsMatchingLabelKeysRow, error) {
	rows, err := db.Query(ctx, listTestsIDsMatchingLabelKeys, arg.IncludeLabelKeys, arg.FilterLabelKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTestsIDsMatchingLabelKeysRow
	for rows.Next() {
		var i ListTestsIDsMatchingLabelKeysRow
		if err := rows.Scan(&i.ID, &i.Labels); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTestsToSchedule = `-- name: ListTestsToSchedule :many
SELECT tests.id, tests.name, tests.run_config, tests.labels, tests.matrix, tests.cron_schedule, tests.next_run_at, tests.registered_at, tests.updated_at
FROM tests
LEFT JOIN runs
ON runs.test_id = tests.id AND runs.result = 'unknown' AND runs.started_at IS NULL
WHERE tests.next_run_at < CURRENT_TIMESTAMP AND runs.id IS NULL
FOR UPDATE OF tests SKIP LOCKED
`

func (q *Queries) ListTestsToSchedule(ctx context.Context, db DBTX) ([]Test, error) {
	rows, err := db.Query(ctx, listTestsToSchedule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RunConfig,
			&i.Labels,
			&i.Matrix,
			&i.CronSchedule,
			&i.NextRunAt,
			&i.RegisteredAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryTests = `-- name: QueryTests :many
SELECT id, name, run_config, labels, matrix, cron_schedule, next_run_at, registered_at, updated_at
FROM tests
WHERE
  ($1::uuid[] IS NULL OR tests.id = ANY ($1::uuid[])) AND
  ($2::uuid[] IS NULL OR tests.id = ANY (
    SELECT tests.id
    FROM test_suites
    JOIN tests
    ON tests.labels @> test_suites.labels
    WHERE test_suites.id = ANY ($2::uuid[])
    )) AND
  ($3::jsonb IS NULL OR tests.labels @> $3::jsonb)
ORDER BY tests.name ASC
`

type QueryTestsParams struct {
	Ids          []uuid.UUID
	TestSuiteIds []uuid.UUID
	Labels       pgtype.JSONB
}

func (q *Queries) QueryTests(ctx context.Context, db DBTX, arg QueryTestsParams) ([]Test, error) {
	rows, err := db.Query(ctx, queryTests, arg.Ids, arg.TestSuiteIds, arg.Labels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Test
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.RunConfig,
			&i.Labels,
			&i.Matrix,
			&i.CronSchedule,
			&i.NextRunAt,
			&i.RegisteredAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerTest = `-- name: RegisterTest :one
INSERT INTO tests (name, run_config, labels, matrix, cron_schedule, next_run_at)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id, name, run_config, labels, matrix, cron_schedule, next_run_at, registered_at, updated_at
`

type RegisterTestParams struct {
	Name         string
	RunConfig    pgtype.JSONB
	Labels       pgtype.JSONB
	Matrix       pgtype.JSONB
	CronSchedule sql.NullString
	NextRunAt    sql.NullTime
}

func (q *Queries) RegisterTest(ctx context.Context, db DBTX, arg RegisterTestParams) (Test, error) {
	row := db.QueryRow(ctx, registerTest,
		arg.Name,
		arg.RunConfig,
		arg.Labels,
		arg.Matrix,
		arg.CronSchedule,
		arg.NextRunAt,
	)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.RunConfig,
		&i.Labels,
		&i.Matrix,
		&i.CronSchedule,
		&i.NextRunAt,
		&i.RegisteredAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTest = `-- name: UpdateTest :exec
UPDATE tests
SET
  name = $1::varchar,
  run_config = $2::jsonb,
  labels = $3::jsonb,
  matrix = $4::jsonb,
  cron_schedule = $5::varchar,
  next_run_at = $6::timestamptz,
  updated_at = CURRENT_TIMESTAMP
WHERE id = $7::uuid
`

type UpdateTestParams struct {
	Name         string
	RunConfig    pgtype.JSONB
	Labels       pgtype.JSONB
	Matrix       pgtype.JSONB
	CronSchedule sql.NullString
	NextRunAt    sql.NullTime
	ID           uuid.UUID
}

func (q *Queries) UpdateTest(ctx context.Context, db DBTX, arg UpdateTestParams) error {
	_, err := db.Exec(ctx, updateTest,
		arg.Name,
		arg.RunConfig,
		arg.Labels,
		arg.Matrix,
		arg.CronSchedule,
		arg.NextRunAt,
		arg.ID,
	)
	return err
}
